unit cCadCliente;

interface

uses
  System.Classes, System.SysUtils, Vcl.Dialogs,
  FireDAC.Comp.Client, Data.DB;

type
  TCliente = class
  private
    conexaoDB: TFDConnection;
    F_id_cliente: Integer;
    F_nome: string;
    F_email: string;
    F_telefone: string;
    F_endereco: string;
    F_cidade: string;
    F_bairro: string;
    F_cep: string;
    F_dataNascimento: TDateTime;
    F_estado: string;
  public
    constructor Create(aConexao: TFDConnection);
    destructor Destroy; override;

    function Gravar: Boolean;
    function Atualizar: Boolean;
    function Apagar: Boolean;
    function Selecionar(id: Integer): Boolean;

    // Propriedades
    property id_cliente: Integer read F_id_cliente write F_id_cliente;
    property nome: string read F_nome write F_nome;
    property email: string read F_email write F_email;
    property telefone: string read F_telefone write F_telefone;
    property endereco: string read F_endereco write F_endereco;
    property cidade: string read F_cidade write F_cidade;
    property bairro: string read F_bairro write F_bairro;
    property cep: string read F_cep write F_cep;
    property dataNascimento: TDateTime read F_dataNascimento write F_dataNascimento;
    property estado: string read F_estado write F_estado;
  end;

implementation

{ TCliente }

constructor TCliente.Create(aConexao: TFDConnection);
begin
  inherited Create;
  if not Assigned(aConexao) then
    raise Exception.Create('Conexão inválida ao criar cliente!');
  if not aConexao.Connected then
    raise Exception.Create('Conexão com o banco não está aberta!');
  conexaoDB := aConexao;
end;

destructor TCliente.Destroy;
begin
  inherited;
end;

function TCliente.Gravar: Boolean;
var
  Q: TFDQuery;
begin
  Result := False;
  if not Assigned(conexaoDB) then
    raise Exception.Create('Conexão inválida ao gravar cliente!');

  Q := TFDQuery.Create(nil);
  try
    Q.Connection := conexaoDB;
    Q.SQL.Text := 'INSERT INTO Cliente (nome, email, telefone, endereco, cidade, bairro, cep, dataNascimento, estado) ' +
                  'VALUES (:nome, :email, :telefone, :endereco, :cidade, :bairro, :cep, :dataNascimento, :estado);';
    Q.ParamByName('nome').AsString := F_nome;
    Q.ParamByName('email').AsString := F_email;
    Q.ParamByName('telefone').AsString := F_telefone;
    Q.ParamByName('endereco').AsString := F_endereco;
    Q.ParamByName('cidade').AsString := F_cidade;
    Q.ParamByName('bairro').AsString := F_bairro;
    Q.ParamByName('cep').AsString := F_cep;
    Q.ParamByName('dataNascimento').AsDateTime := F_dataNascimento;
    Q.ParamByName('estado').AsString := F_estado;

    try
      Q.ExecSQL;
      Result := True;
    except
      on E: Exception do
      begin
        ShowMessage('Erro ao gravar cliente: ' + E.Message);
        Result := False;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TCliente.Atualizar: Boolean;
var
  Q: TFDQuery;
begin
  Result := False;
  if not Assigned(conexaoDB) then
    raise Exception.Create('Conexão inválida ao atualizar cliente!');
  if F_id_cliente <= 0 then
    raise Exception.Create('ID inválido para atualização.');

  Q := TFDQuery.Create(nil);
  try
    Q.Connection := conexaoDB;
    Q.SQL.Text := 'UPDATE Cliente SET nome=:nome, email=:email, telefone=:telefone, endereco=:endereco, ' +
                  'cidade=:cidade, bairro=:bairro, cep=:cep, dataNascimento=:dataNascimento, estado=:estado ' +
                  'WHERE id_cliente=:id_cliente;';
    Q.ParamByName('nome').AsString := F_nome;
    Q.ParamByName('email').AsString := F_email;
    Q.ParamByName('telefone').AsString := F_telefone;
    Q.ParamByName('endereco').AsString := F_endereco;
    Q.ParamByName('cidade').AsString := F_cidade;
    Q.ParamByName('bairro').AsString := F_bairro;
    Q.ParamByName('cep').AsString := F_cep;
    Q.ParamByName('dataNascimento').AsDateTime := F_dataNascimento;
    Q.ParamByName('estado').AsString := F_estado;
    Q.ParamByName('id_cliente').AsInteger := F_id_cliente;

    try
      Q.ExecSQL;
      Result := True;
    except
      on E: Exception do
      begin
        ShowMessage('Erro ao atualizar cliente: ' + E.Message);
        Result := False;
      end;
    end;
  finally
    Q.Free;
  end;
end;

function TCliente.Apagar: Boolean;
var
  Q: TFDQuery;
begin
  Result := False;
  if not Assigned(conexaoDB) then
    raise Exception.Create('Conexão inválida ao apagar cliente!');
  if F_id_cliente <= 0 then
    raise Exception.Create('ID inválido para exclusão.');

  if MessageDlg('Deseja realmente apagar o cliente "' + F_nome + '"?', mtConfirmation, [mbYes, mbNo], 0) <> mrYes then
    Exit;

  Q := TFDQuery.Create(nil);
  try
    Q.Connection := conexaoDB;
    Q.SQL.Text := 'DELETE FROM Cliente WHERE id_cliente=:id_cliente;';
    Q.ParamByName('id_cliente').AsInteger := F_id_cliente;

    try
      Q.ExecSQL;
      Result := True;
    except
      on E: Exception do
        ShowMessage('Erro ao apagar cliente: ' + E.Message);
    end;
  finally
    Q.Free;
  end;
end;

function TCliente.Selecionar(id: Integer): Boolean;
var
  Q: TFDQuery;
begin
  Result := False;
  if not Assigned(conexaoDB) then
    raise Exception.Create('Conexão inválida ao selecionar cliente!');
  if id <= 0 then
    raise Exception.Create('ID inválido para seleção.');

  Q := TFDQuery.Create(nil);
  try
    Q.Connection := conexaoDB;
    Q.SQL.Text := 'SELECT id_cliente, nome, email, telefone, endereco, cidade, bairro, cep, dataNascimento, estado ' +
                  'FROM Cliente WHERE id_cliente=:id_cliente;';
    Q.ParamByName('id_cliente').AsInteger := id;

    try
      Q.Open;
      if not Q.IsEmpty then
      begin
        F_id_cliente := Q.FieldByName('id_cliente').AsInteger;
        F_nome := Q.FieldByName('nome').AsString;
        F_email := Q.FieldByName('email').AsString;
        F_telefone := Q.FieldByName('telefone').AsString;
        F_endereco := Q.FieldByName('endereco').AsString;
        F_cidade := Q.FieldByName('cidade').AsString;
        F_bairro := Q.FieldByName('bairro').AsString;
        F_cep := Q.FieldByName('cep').AsString;
        F_dataNascimento := Q.FieldByName('dataNascimento').AsDateTime;
        F_estado := Q.FieldByName('estado').AsString;
        Result := True;
      end;
    except
      on E: Exception do
        ShowMessage('Erro ao selecionar cliente: ' + E.Message);
    end;
  finally
    Q.Free;
  end;
end;

end.

